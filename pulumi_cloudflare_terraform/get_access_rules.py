# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAccessRulesResult',
    'AwaitableGetAccessRulesResult',
    'get_access_rules',
    'get_access_rules_output',
]

@pulumi.output_type
class GetAccessRulesResult:
    """
    A collection of values returned by getAccessRules.
    """
    def __init__(__self__, account_id=None, configuration=None, direction=None, id=None, match=None, max_items=None, mode=None, notes=None, order=None, results=None, zone_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match and not isinstance(match, str):
            raise TypeError("Expected argument 'match' to be a str")
        pulumi.set(__self__, "match", match)
        if max_items and not isinstance(max_items, float):
            raise TypeError("Expected argument 'max_items' to be a float")
        pulumi.set(__self__, "max_items", max_items)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.GetAccessRulesConfigurationResult']:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> str:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[float]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetAccessRulesResultResult']:
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


class AwaitableGetAccessRulesResult(GetAccessRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessRulesResult(
            account_id=self.account_id,
            configuration=self.configuration,
            direction=self.direction,
            id=self.id,
            match=self.match,
            max_items=self.max_items,
            mode=self.mode,
            notes=self.notes,
            order=self.order,
            results=self.results,
            zone_id=self.zone_id)


def get_access_rules(account_id: Optional[str] = None,
                     configuration: Optional[Union['GetAccessRulesConfigurationArgs', 'GetAccessRulesConfigurationArgsDict']] = None,
                     direction: Optional[str] = None,
                     match: Optional[str] = None,
                     max_items: Optional[float] = None,
                     mode: Optional[str] = None,
                     notes: Optional[str] = None,
                     order: Optional[str] = None,
                     zone_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['configuration'] = configuration
    __args__['direction'] = direction
    __args__['match'] = match
    __args__['maxItems'] = max_items
    __args__['mode'] = mode
    __args__['notes'] = notes
    __args__['order'] = order
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getAccessRules:getAccessRules', __args__, opts=opts, typ=GetAccessRulesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAccessRulesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        configuration=pulumi.get(__ret__, 'configuration'),
        direction=pulumi.get(__ret__, 'direction'),
        id=pulumi.get(__ret__, 'id'),
        match=pulumi.get(__ret__, 'match'),
        max_items=pulumi.get(__ret__, 'max_items'),
        mode=pulumi.get(__ret__, 'mode'),
        notes=pulumi.get(__ret__, 'notes'),
        order=pulumi.get(__ret__, 'order'),
        results=pulumi.get(__ret__, 'results'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_access_rules_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                            configuration: Optional[pulumi.Input[Optional[Union['GetAccessRulesConfigurationArgs', 'GetAccessRulesConfigurationArgsDict']]]] = None,
                            direction: Optional[pulumi.Input[Optional[str]]] = None,
                            match: Optional[pulumi.Input[Optional[str]]] = None,
                            max_items: Optional[pulumi.Input[Optional[float]]] = None,
                            mode: Optional[pulumi.Input[Optional[str]]] = None,
                            notes: Optional[pulumi.Input[Optional[str]]] = None,
                            order: Optional[pulumi.Input[Optional[str]]] = None,
                            zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccessRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['configuration'] = configuration
    __args__['direction'] = direction
    __args__['match'] = match
    __args__['maxItems'] = max_items
    __args__['mode'] = mode
    __args__['notes'] = notes
    __args__['order'] = order
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getAccessRules:getAccessRules', __args__, opts=opts, typ=GetAccessRulesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAccessRulesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        configuration=pulumi.get(__response__, 'configuration'),
        direction=pulumi.get(__response__, 'direction'),
        id=pulumi.get(__response__, 'id'),
        match=pulumi.get(__response__, 'match'),
        max_items=pulumi.get(__response__, 'max_items'),
        mode=pulumi.get(__response__, 'mode'),
        notes=pulumi.get(__response__, 'notes'),
        order=pulumi.get(__response__, 'order'),
        results=pulumi.get(__response__, 'results'),
        zone_id=pulumi.get(__response__, 'zone_id')))
