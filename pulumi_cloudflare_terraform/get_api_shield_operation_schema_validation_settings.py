# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetApiShieldOperationSchemaValidationSettingsResult',
    'AwaitableGetApiShieldOperationSchemaValidationSettingsResult',
    'get_api_shield_operation_schema_validation_settings',
    'get_api_shield_operation_schema_validation_settings_output',
]

@pulumi.output_type
class GetApiShieldOperationSchemaValidationSettingsResult:
    """
    A collection of values returned by getApiShieldOperationSchemaValidationSettings.
    """
    def __init__(__self__, id=None, mitigation_action=None, operation_id=None, zone_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mitigation_action and not isinstance(mitigation_action, str):
            raise TypeError("Expected argument 'mitigation_action' to be a str")
        pulumi.set(__self__, "mitigation_action", mitigation_action)
        if operation_id and not isinstance(operation_id, str):
            raise TypeError("Expected argument 'operation_id' to be a str")
        pulumi.set(__self__, "operation_id", operation_id)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mitigationAction")
    def mitigation_action(self) -> str:
        return pulumi.get(self, "mitigation_action")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> str:
        return pulumi.get(self, "operation_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetApiShieldOperationSchemaValidationSettingsResult(GetApiShieldOperationSchemaValidationSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiShieldOperationSchemaValidationSettingsResult(
            id=self.id,
            mitigation_action=self.mitigation_action,
            operation_id=self.operation_id,
            zone_id=self.zone_id)


def get_api_shield_operation_schema_validation_settings(operation_id: Optional[str] = None,
                                                        zone_id: Optional[str] = None,
                                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiShieldOperationSchemaValidationSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['operationId'] = operation_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getApiShieldOperationSchemaValidationSettings:getApiShieldOperationSchemaValidationSettings', __args__, opts=opts, typ=GetApiShieldOperationSchemaValidationSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetApiShieldOperationSchemaValidationSettingsResult(
        id=pulumi.get(__ret__, 'id'),
        mitigation_action=pulumi.get(__ret__, 'mitigation_action'),
        operation_id=pulumi.get(__ret__, 'operation_id'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_api_shield_operation_schema_validation_settings_output(operation_id: Optional[pulumi.Input[str]] = None,
                                                               zone_id: Optional[pulumi.Input[str]] = None,
                                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiShieldOperationSchemaValidationSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['operationId'] = operation_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getApiShieldOperationSchemaValidationSettings:getApiShieldOperationSchemaValidationSettings', __args__, opts=opts, typ=GetApiShieldOperationSchemaValidationSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetApiShieldOperationSchemaValidationSettingsResult(
        id=pulumi.get(__response__, 'id'),
        mitigation_action=pulumi.get(__response__, 'mitigation_action'),
        operation_id=pulumi.get(__response__, 'operation_id'),
        zone_id=pulumi.get(__response__, 'zone_id')))
