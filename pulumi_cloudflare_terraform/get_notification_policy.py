# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNotificationPolicyResult',
    'AwaitableGetNotificationPolicyResult',
    'get_notification_policy',
    'get_notification_policy_output',
]

@pulumi.output_type
class GetNotificationPolicyResult:
    """
    A collection of values returned by getNotificationPolicy.
    """
    def __init__(__self__, account_id=None, alert_interval=None, alert_type=None, created=None, description=None, enabled=None, filters=None, id=None, mechanisms=None, modified=None, name=None, policy_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if alert_interval and not isinstance(alert_interval, str):
            raise TypeError("Expected argument 'alert_interval' to be a str")
        pulumi.set(__self__, "alert_interval", alert_interval)
        if alert_type and not isinstance(alert_type, str):
            raise TypeError("Expected argument 'alert_type' to be a str")
        pulumi.set(__self__, "alert_type", alert_type)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if filters and not isinstance(filters, dict):
            raise TypeError("Expected argument 'filters' to be a dict")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mechanisms and not isinstance(mechanisms, dict):
            raise TypeError("Expected argument 'mechanisms' to be a dict")
        pulumi.set(__self__, "mechanisms", mechanisms)
        if modified and not isinstance(modified, str):
            raise TypeError("Expected argument 'modified' to be a str")
        pulumi.set(__self__, "modified", modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="alertInterval")
    def alert_interval(self) -> str:
        return pulumi.get(self, "alert_interval")

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> str:
        return pulumi.get(self, "alert_type")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> 'outputs.GetNotificationPolicyFiltersResult':
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mechanisms(self) -> 'outputs.GetNotificationPolicyMechanismsResult':
        return pulumi.get(self, "mechanisms")

    @property
    @pulumi.getter
    def modified(self) -> str:
        return pulumi.get(self, "modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")


class AwaitableGetNotificationPolicyResult(GetNotificationPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNotificationPolicyResult(
            account_id=self.account_id,
            alert_interval=self.alert_interval,
            alert_type=self.alert_type,
            created=self.created,
            description=self.description,
            enabled=self.enabled,
            filters=self.filters,
            id=self.id,
            mechanisms=self.mechanisms,
            modified=self.modified,
            name=self.name,
            policy_id=self.policy_id)


def get_notification_policy(account_id: Optional[str] = None,
                            policy_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNotificationPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getNotificationPolicy:getNotificationPolicy', __args__, opts=opts, typ=GetNotificationPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetNotificationPolicyResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        alert_interval=pulumi.get(__ret__, 'alert_interval'),
        alert_type=pulumi.get(__ret__, 'alert_type'),
        created=pulumi.get(__ret__, 'created'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        mechanisms=pulumi.get(__ret__, 'mechanisms'),
        modified=pulumi.get(__ret__, 'modified'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'))
def get_notification_policy_output(account_id: Optional[pulumi.Input[str]] = None,
                                   policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNotificationPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getNotificationPolicy:getNotificationPolicy', __args__, opts=opts, typ=GetNotificationPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetNotificationPolicyResult(
        account_id=pulumi.get(__response__, 'account_id'),
        alert_interval=pulumi.get(__response__, 'alert_interval'),
        alert_type=pulumi.get(__response__, 'alert_type'),
        created=pulumi.get(__response__, 'created'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        mechanisms=pulumi.get(__response__, 'mechanisms'),
        modified=pulumi.get(__response__, 'modified'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id')))
