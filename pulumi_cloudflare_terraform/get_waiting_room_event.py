# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWaitingRoomEventResult',
    'AwaitableGetWaitingRoomEventResult',
    'get_waiting_room_event',
    'get_waiting_room_event_output',
]

@pulumi.output_type
class GetWaitingRoomEventResult:
    """
    A collection of values returned by getWaitingRoomEvent.
    """
    def __init__(__self__, created_on=None, custom_page_html=None, description=None, disable_session_renewal=None, event_end_time=None, event_id=None, event_start_time=None, id=None, modified_on=None, name=None, new_users_per_minute=None, prequeue_start_time=None, queueing_method=None, session_duration=None, shuffle_at_event_start=None, suspended=None, total_active_users=None, waiting_room_id=None, zone_id=None):
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if custom_page_html and not isinstance(custom_page_html, str):
            raise TypeError("Expected argument 'custom_page_html' to be a str")
        pulumi.set(__self__, "custom_page_html", custom_page_html)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disable_session_renewal and not isinstance(disable_session_renewal, bool):
            raise TypeError("Expected argument 'disable_session_renewal' to be a bool")
        pulumi.set(__self__, "disable_session_renewal", disable_session_renewal)
        if event_end_time and not isinstance(event_end_time, str):
            raise TypeError("Expected argument 'event_end_time' to be a str")
        pulumi.set(__self__, "event_end_time", event_end_time)
        if event_id and not isinstance(event_id, str):
            raise TypeError("Expected argument 'event_id' to be a str")
        pulumi.set(__self__, "event_id", event_id)
        if event_start_time and not isinstance(event_start_time, str):
            raise TypeError("Expected argument 'event_start_time' to be a str")
        pulumi.set(__self__, "event_start_time", event_start_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_on and not isinstance(modified_on, str):
            raise TypeError("Expected argument 'modified_on' to be a str")
        pulumi.set(__self__, "modified_on", modified_on)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if new_users_per_minute and not isinstance(new_users_per_minute, float):
            raise TypeError("Expected argument 'new_users_per_minute' to be a float")
        pulumi.set(__self__, "new_users_per_minute", new_users_per_minute)
        if prequeue_start_time and not isinstance(prequeue_start_time, str):
            raise TypeError("Expected argument 'prequeue_start_time' to be a str")
        pulumi.set(__self__, "prequeue_start_time", prequeue_start_time)
        if queueing_method and not isinstance(queueing_method, str):
            raise TypeError("Expected argument 'queueing_method' to be a str")
        pulumi.set(__self__, "queueing_method", queueing_method)
        if session_duration and not isinstance(session_duration, float):
            raise TypeError("Expected argument 'session_duration' to be a float")
        pulumi.set(__self__, "session_duration", session_duration)
        if shuffle_at_event_start and not isinstance(shuffle_at_event_start, bool):
            raise TypeError("Expected argument 'shuffle_at_event_start' to be a bool")
        pulumi.set(__self__, "shuffle_at_event_start", shuffle_at_event_start)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)
        if total_active_users and not isinstance(total_active_users, float):
            raise TypeError("Expected argument 'total_active_users' to be a float")
        pulumi.set(__self__, "total_active_users", total_active_users)
        if waiting_room_id and not isinstance(waiting_room_id, str):
            raise TypeError("Expected argument 'waiting_room_id' to be a str")
        pulumi.set(__self__, "waiting_room_id", waiting_room_id)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="customPageHtml")
    def custom_page_html(self) -> str:
        return pulumi.get(self, "custom_page_html")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableSessionRenewal")
    def disable_session_renewal(self) -> bool:
        return pulumi.get(self, "disable_session_renewal")

    @property
    @pulumi.getter(name="eventEndTime")
    def event_end_time(self) -> str:
        return pulumi.get(self, "event_end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[str]:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventStartTime")
    def event_start_time(self) -> str:
        return pulumi.get(self, "event_start_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> str:
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newUsersPerMinute")
    def new_users_per_minute(self) -> float:
        return pulumi.get(self, "new_users_per_minute")

    @property
    @pulumi.getter(name="prequeueStartTime")
    def prequeue_start_time(self) -> str:
        return pulumi.get(self, "prequeue_start_time")

    @property
    @pulumi.getter(name="queueingMethod")
    def queueing_method(self) -> str:
        return pulumi.get(self, "queueing_method")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> float:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="shuffleAtEventStart")
    def shuffle_at_event_start(self) -> bool:
        return pulumi.get(self, "shuffle_at_event_start")

    @property
    @pulumi.getter
    def suspended(self) -> bool:
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="totalActiveUsers")
    def total_active_users(self) -> float:
        return pulumi.get(self, "total_active_users")

    @property
    @pulumi.getter(name="waitingRoomId")
    def waiting_room_id(self) -> str:
        return pulumi.get(self, "waiting_room_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetWaitingRoomEventResult(GetWaitingRoomEventResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWaitingRoomEventResult(
            created_on=self.created_on,
            custom_page_html=self.custom_page_html,
            description=self.description,
            disable_session_renewal=self.disable_session_renewal,
            event_end_time=self.event_end_time,
            event_id=self.event_id,
            event_start_time=self.event_start_time,
            id=self.id,
            modified_on=self.modified_on,
            name=self.name,
            new_users_per_minute=self.new_users_per_minute,
            prequeue_start_time=self.prequeue_start_time,
            queueing_method=self.queueing_method,
            session_duration=self.session_duration,
            shuffle_at_event_start=self.shuffle_at_event_start,
            suspended=self.suspended,
            total_active_users=self.total_active_users,
            waiting_room_id=self.waiting_room_id,
            zone_id=self.zone_id)


def get_waiting_room_event(event_id: Optional[str] = None,
                           waiting_room_id: Optional[str] = None,
                           zone_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWaitingRoomEventResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['eventId'] = event_id
    __args__['waitingRoomId'] = waiting_room_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWaitingRoomEvent:getWaitingRoomEvent', __args__, opts=opts, typ=GetWaitingRoomEventResult, package_ref=_utilities.get_package()).value

    return AwaitableGetWaitingRoomEventResult(
        created_on=pulumi.get(__ret__, 'created_on'),
        custom_page_html=pulumi.get(__ret__, 'custom_page_html'),
        description=pulumi.get(__ret__, 'description'),
        disable_session_renewal=pulumi.get(__ret__, 'disable_session_renewal'),
        event_end_time=pulumi.get(__ret__, 'event_end_time'),
        event_id=pulumi.get(__ret__, 'event_id'),
        event_start_time=pulumi.get(__ret__, 'event_start_time'),
        id=pulumi.get(__ret__, 'id'),
        modified_on=pulumi.get(__ret__, 'modified_on'),
        name=pulumi.get(__ret__, 'name'),
        new_users_per_minute=pulumi.get(__ret__, 'new_users_per_minute'),
        prequeue_start_time=pulumi.get(__ret__, 'prequeue_start_time'),
        queueing_method=pulumi.get(__ret__, 'queueing_method'),
        session_duration=pulumi.get(__ret__, 'session_duration'),
        shuffle_at_event_start=pulumi.get(__ret__, 'shuffle_at_event_start'),
        suspended=pulumi.get(__ret__, 'suspended'),
        total_active_users=pulumi.get(__ret__, 'total_active_users'),
        waiting_room_id=pulumi.get(__ret__, 'waiting_room_id'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_waiting_room_event_output(event_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  waiting_room_id: Optional[pulumi.Input[str]] = None,
                                  zone_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWaitingRoomEventResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['eventId'] = event_id
    __args__['waitingRoomId'] = waiting_room_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getWaitingRoomEvent:getWaitingRoomEvent', __args__, opts=opts, typ=GetWaitingRoomEventResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetWaitingRoomEventResult(
        created_on=pulumi.get(__response__, 'created_on'),
        custom_page_html=pulumi.get(__response__, 'custom_page_html'),
        description=pulumi.get(__response__, 'description'),
        disable_session_renewal=pulumi.get(__response__, 'disable_session_renewal'),
        event_end_time=pulumi.get(__response__, 'event_end_time'),
        event_id=pulumi.get(__response__, 'event_id'),
        event_start_time=pulumi.get(__response__, 'event_start_time'),
        id=pulumi.get(__response__, 'id'),
        modified_on=pulumi.get(__response__, 'modified_on'),
        name=pulumi.get(__response__, 'name'),
        new_users_per_minute=pulumi.get(__response__, 'new_users_per_minute'),
        prequeue_start_time=pulumi.get(__response__, 'prequeue_start_time'),
        queueing_method=pulumi.get(__response__, 'queueing_method'),
        session_duration=pulumi.get(__response__, 'session_duration'),
        shuffle_at_event_start=pulumi.get(__response__, 'shuffle_at_event_start'),
        suspended=pulumi.get(__response__, 'suspended'),
        total_active_users=pulumi.get(__response__, 'total_active_users'),
        waiting_room_id=pulumi.get(__response__, 'waiting_room_id'),
        zone_id=pulumi.get(__response__, 'zone_id')))
