# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWorkersKvResult',
    'AwaitableGetWorkersKvResult',
    'get_workers_kv',
    'get_workers_kv_output',
]

@pulumi.output_type
class GetWorkersKvResult:
    """
    A collection of values returned by getWorkersKv.
    """
    def __init__(__self__, account_id=None, id=None, key_name=None, namespace_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_name and not isinstance(key_name, str):
            raise TypeError("Expected argument 'key_name' to be a str")
        pulumi.set(__self__, "key_name", key_name)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> str:
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        return pulumi.get(self, "namespace_id")


class AwaitableGetWorkersKvResult(GetWorkersKvResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkersKvResult(
            account_id=self.account_id,
            id=self.id,
            key_name=self.key_name,
            namespace_id=self.namespace_id)


def get_workers_kv(account_id: Optional[str] = None,
                   key_name: Optional[str] = None,
                   namespace_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkersKvResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['keyName'] = key_name
    __args__['namespaceId'] = namespace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWorkersKv:getWorkersKv', __args__, opts=opts, typ=GetWorkersKvResult, package_ref=_utilities.get_package()).value

    return AwaitableGetWorkersKvResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        key_name=pulumi.get(__ret__, 'key_name'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'))
def get_workers_kv_output(account_id: Optional[pulumi.Input[str]] = None,
                          key_name: Optional[pulumi.Input[str]] = None,
                          namespace_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkersKvResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['keyName'] = key_name
    __args__['namespaceId'] = namespace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getWorkersKv:getWorkersKv', __args__, opts=opts, typ=GetWorkersKvResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetWorkersKvResult(
        account_id=pulumi.get(__response__, 'account_id'),
        id=pulumi.get(__response__, 'id'),
        key_name=pulumi.get(__response__, 'key_name'),
        namespace_id=pulumi.get(__response__, 'namespace_id')))
