# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetListItemResult',
    'AwaitableGetListItemResult',
    'get_list_item',
    'get_list_item_output',
]

@pulumi.output_type
class GetListItemResult:
    """
    A collection of values returned by getListItem.
    """
    def __init__(__self__, account_identifier=None, asn=None, comment=None, created_on=None, hostname=None, id=None, ip=None, item_id=None, list_id=None, modified_on=None, redirect=None):
        if account_identifier and not isinstance(account_identifier, str):
            raise TypeError("Expected argument 'account_identifier' to be a str")
        pulumi.set(__self__, "account_identifier", account_identifier)
        if asn and not isinstance(asn, float):
            raise TypeError("Expected argument 'asn' to be a float")
        pulumi.set(__self__, "asn", asn)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if hostname and not isinstance(hostname, dict):
            raise TypeError("Expected argument 'hostname' to be a dict")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if item_id and not isinstance(item_id, str):
            raise TypeError("Expected argument 'item_id' to be a str")
        pulumi.set(__self__, "item_id", item_id)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)
        if modified_on and not isinstance(modified_on, str):
            raise TypeError("Expected argument 'modified_on' to be a str")
        pulumi.set(__self__, "modified_on", modified_on)
        if redirect and not isinstance(redirect, dict):
            raise TypeError("Expected argument 'redirect' to be a dict")
        pulumi.set(__self__, "redirect", redirect)

    @property
    @pulumi.getter(name="accountIdentifier")
    def account_identifier(self) -> str:
        return pulumi.get(self, "account_identifier")

    @property
    @pulumi.getter
    def asn(self) -> float:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def hostname(self) -> 'outputs.GetListItemHostnameResult':
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> str:
        return pulumi.get(self, "item_id")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> str:
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def redirect(self) -> 'outputs.GetListItemRedirectResult':
        return pulumi.get(self, "redirect")


class AwaitableGetListItemResult(GetListItemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListItemResult(
            account_identifier=self.account_identifier,
            asn=self.asn,
            comment=self.comment,
            created_on=self.created_on,
            hostname=self.hostname,
            id=self.id,
            ip=self.ip,
            item_id=self.item_id,
            list_id=self.list_id,
            modified_on=self.modified_on,
            redirect=self.redirect)


def get_list_item(account_identifier: Optional[str] = None,
                  item_id: Optional[str] = None,
                  list_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListItemResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountIdentifier'] = account_identifier
    __args__['itemId'] = item_id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getListItem:getListItem', __args__, opts=opts, typ=GetListItemResult, package_ref=_utilities.get_package()).value

    return AwaitableGetListItemResult(
        account_identifier=pulumi.get(__ret__, 'account_identifier'),
        asn=pulumi.get(__ret__, 'asn'),
        comment=pulumi.get(__ret__, 'comment'),
        created_on=pulumi.get(__ret__, 'created_on'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        item_id=pulumi.get(__ret__, 'item_id'),
        list_id=pulumi.get(__ret__, 'list_id'),
        modified_on=pulumi.get(__ret__, 'modified_on'),
        redirect=pulumi.get(__ret__, 'redirect'))
def get_list_item_output(account_identifier: Optional[pulumi.Input[str]] = None,
                         item_id: Optional[pulumi.Input[str]] = None,
                         list_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetListItemResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountIdentifier'] = account_identifier
    __args__['itemId'] = item_id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getListItem:getListItem', __args__, opts=opts, typ=GetListItemResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetListItemResult(
        account_identifier=pulumi.get(__response__, 'account_identifier'),
        asn=pulumi.get(__response__, 'asn'),
        comment=pulumi.get(__response__, 'comment'),
        created_on=pulumi.get(__response__, 'created_on'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        item_id=pulumi.get(__response__, 'item_id'),
        list_id=pulumi.get(__response__, 'list_id'),
        modified_on=pulumi.get(__response__, 'modified_on'),
        redirect=pulumi.get(__response__, 'redirect')))
