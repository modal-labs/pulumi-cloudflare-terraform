# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZeroTrustDevicePostureRuleResult',
    'AwaitableGetZeroTrustDevicePostureRuleResult',
    'get_zero_trust_device_posture_rule',
    'get_zero_trust_device_posture_rule_output',
]

@pulumi.output_type
class GetZeroTrustDevicePostureRuleResult:
    """
    A collection of values returned by getZeroTrustDevicePostureRule.
    """
    def __init__(__self__, account_id=None, description=None, expiration=None, id=None, input=None, matches=None, name=None, rule_id=None, schedule=None, type=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expiration and not isinstance(expiration, str):
            raise TypeError("Expected argument 'expiration' to be a str")
        pulumi.set(__self__, "expiration", expiration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input and not isinstance(input, dict):
            raise TypeError("Expected argument 'input' to be a dict")
        pulumi.set(__self__, "input", input)
        if matches and not isinstance(matches, list):
            raise TypeError("Expected argument 'matches' to be a list")
        pulumi.set(__self__, "matches", matches)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expiration(self) -> str:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def input(self) -> 'outputs.GetZeroTrustDevicePostureRuleInputResult':
        return pulumi.get(self, "input")

    @property
    @pulumi.getter
    def matches(self) -> Sequence['outputs.GetZeroTrustDevicePostureRuleMatchResult']:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetZeroTrustDevicePostureRuleResult(GetZeroTrustDevicePostureRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustDevicePostureRuleResult(
            account_id=self.account_id,
            description=self.description,
            expiration=self.expiration,
            id=self.id,
            input=self.input,
            matches=self.matches,
            name=self.name,
            rule_id=self.rule_id,
            schedule=self.schedule,
            type=self.type)


def get_zero_trust_device_posture_rule(account_id: Optional[str] = None,
                                       rule_id: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustDevicePostureRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustDevicePostureRule:getZeroTrustDevicePostureRule', __args__, opts=opts, typ=GetZeroTrustDevicePostureRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetZeroTrustDevicePostureRuleResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        description=pulumi.get(__ret__, 'description'),
        expiration=pulumi.get(__ret__, 'expiration'),
        id=pulumi.get(__ret__, 'id'),
        input=pulumi.get(__ret__, 'input'),
        matches=pulumi.get(__ret__, 'matches'),
        name=pulumi.get(__ret__, 'name'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        schedule=pulumi.get(__ret__, 'schedule'),
        type=pulumi.get(__ret__, 'type'))
def get_zero_trust_device_posture_rule_output(account_id: Optional[pulumi.Input[str]] = None,
                                              rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustDevicePostureRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustDevicePostureRule:getZeroTrustDevicePostureRule', __args__, opts=opts, typ=GetZeroTrustDevicePostureRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetZeroTrustDevicePostureRuleResult(
        account_id=pulumi.get(__response__, 'account_id'),
        description=pulumi.get(__response__, 'description'),
        expiration=pulumi.get(__response__, 'expiration'),
        id=pulumi.get(__response__, 'id'),
        input=pulumi.get(__response__, 'input'),
        matches=pulumi.get(__response__, 'matches'),
        name=pulumi.get(__response__, 'name'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        schedule=pulumi.get(__response__, 'schedule'),
        type=pulumi.get(__response__, 'type')))
