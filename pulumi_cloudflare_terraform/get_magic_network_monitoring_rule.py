# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMagicNetworkMonitoringRuleResult',
    'AwaitableGetMagicNetworkMonitoringRuleResult',
    'get_magic_network_monitoring_rule',
    'get_magic_network_monitoring_rule_output',
]

@pulumi.output_type
class GetMagicNetworkMonitoringRuleResult:
    """
    A collection of values returned by getMagicNetworkMonitoringRule.
    """
    def __init__(__self__, account_id=None, automatic_advertisement=None, bandwidth_threshold=None, duration=None, id=None, name=None, packet_threshold=None, prefixes=None, rule_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if automatic_advertisement and not isinstance(automatic_advertisement, bool):
            raise TypeError("Expected argument 'automatic_advertisement' to be a bool")
        pulumi.set(__self__, "automatic_advertisement", automatic_advertisement)
        if bandwidth_threshold and not isinstance(bandwidth_threshold, float):
            raise TypeError("Expected argument 'bandwidth_threshold' to be a float")
        pulumi.set(__self__, "bandwidth_threshold", bandwidth_threshold)
        if duration and not isinstance(duration, str):
            raise TypeError("Expected argument 'duration' to be a str")
        pulumi.set(__self__, "duration", duration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if packet_threshold and not isinstance(packet_threshold, float):
            raise TypeError("Expected argument 'packet_threshold' to be a float")
        pulumi.set(__self__, "packet_threshold", packet_threshold)
        if prefixes and not isinstance(prefixes, list):
            raise TypeError("Expected argument 'prefixes' to be a list")
        pulumi.set(__self__, "prefixes", prefixes)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="automaticAdvertisement")
    def automatic_advertisement(self) -> bool:
        return pulumi.get(self, "automatic_advertisement")

    @property
    @pulumi.getter(name="bandwidthThreshold")
    def bandwidth_threshold(self) -> float:
        return pulumi.get(self, "bandwidth_threshold")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetThreshold")
    def packet_threshold(self) -> float:
        return pulumi.get(self, "packet_threshold")

    @property
    @pulumi.getter
    def prefixes(self) -> Sequence[str]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")


class AwaitableGetMagicNetworkMonitoringRuleResult(GetMagicNetworkMonitoringRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMagicNetworkMonitoringRuleResult(
            account_id=self.account_id,
            automatic_advertisement=self.automatic_advertisement,
            bandwidth_threshold=self.bandwidth_threshold,
            duration=self.duration,
            id=self.id,
            name=self.name,
            packet_threshold=self.packet_threshold,
            prefixes=self.prefixes,
            rule_id=self.rule_id)


def get_magic_network_monitoring_rule(account_id: Optional[str] = None,
                                      rule_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMagicNetworkMonitoringRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getMagicNetworkMonitoringRule:getMagicNetworkMonitoringRule', __args__, opts=opts, typ=GetMagicNetworkMonitoringRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetMagicNetworkMonitoringRuleResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        automatic_advertisement=pulumi.get(__ret__, 'automatic_advertisement'),
        bandwidth_threshold=pulumi.get(__ret__, 'bandwidth_threshold'),
        duration=pulumi.get(__ret__, 'duration'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        packet_threshold=pulumi.get(__ret__, 'packet_threshold'),
        prefixes=pulumi.get(__ret__, 'prefixes'),
        rule_id=pulumi.get(__ret__, 'rule_id'))
def get_magic_network_monitoring_rule_output(account_id: Optional[pulumi.Input[str]] = None,
                                             rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMagicNetworkMonitoringRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getMagicNetworkMonitoringRule:getMagicNetworkMonitoringRule', __args__, opts=opts, typ=GetMagicNetworkMonitoringRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetMagicNetworkMonitoringRuleResult(
        account_id=pulumi.get(__response__, 'account_id'),
        automatic_advertisement=pulumi.get(__response__, 'automatic_advertisement'),
        bandwidth_threshold=pulumi.get(__response__, 'bandwidth_threshold'),
        duration=pulumi.get(__response__, 'duration'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        packet_threshold=pulumi.get(__response__, 'packet_threshold'),
        prefixes=pulumi.get(__response__, 'prefixes'),
        rule_id=pulumi.get(__response__, 'rule_id')))
