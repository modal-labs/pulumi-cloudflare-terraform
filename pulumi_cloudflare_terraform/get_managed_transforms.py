# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetManagedTransformsResult',
    'AwaitableGetManagedTransformsResult',
    'get_managed_transforms',
    'get_managed_transforms_output',
]

@pulumi.output_type
class GetManagedTransformsResult:
    """
    A collection of values returned by getManagedTransforms.
    """
    def __init__(__self__, id=None, managed_request_headers=None, managed_response_headers=None, zone_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_request_headers and not isinstance(managed_request_headers, list):
            raise TypeError("Expected argument 'managed_request_headers' to be a list")
        pulumi.set(__self__, "managed_request_headers", managed_request_headers)
        if managed_response_headers and not isinstance(managed_response_headers, list):
            raise TypeError("Expected argument 'managed_response_headers' to be a list")
        pulumi.set(__self__, "managed_response_headers", managed_response_headers)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedRequestHeaders")
    def managed_request_headers(self) -> Sequence['outputs.GetManagedTransformsManagedRequestHeaderResult']:
        return pulumi.get(self, "managed_request_headers")

    @property
    @pulumi.getter(name="managedResponseHeaders")
    def managed_response_headers(self) -> Sequence['outputs.GetManagedTransformsManagedResponseHeaderResult']:
        return pulumi.get(self, "managed_response_headers")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetManagedTransformsResult(GetManagedTransformsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedTransformsResult(
            id=self.id,
            managed_request_headers=self.managed_request_headers,
            managed_response_headers=self.managed_response_headers,
            zone_id=self.zone_id)


def get_managed_transforms(zone_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedTransformsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getManagedTransforms:getManagedTransforms', __args__, opts=opts, typ=GetManagedTransformsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetManagedTransformsResult(
        id=pulumi.get(__ret__, 'id'),
        managed_request_headers=pulumi.get(__ret__, 'managed_request_headers'),
        managed_response_headers=pulumi.get(__ret__, 'managed_response_headers'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_managed_transforms_output(zone_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetManagedTransformsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getManagedTransforms:getManagedTransforms', __args__, opts=opts, typ=GetManagedTransformsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetManagedTransformsResult(
        id=pulumi.get(__response__, 'id'),
        managed_request_headers=pulumi.get(__response__, 'managed_request_headers'),
        managed_response_headers=pulumi.get(__response__, 'managed_response_headers'),
        zone_id=pulumi.get(__response__, 'zone_id')))
