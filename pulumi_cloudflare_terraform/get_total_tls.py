# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTotalTlsResult',
    'AwaitableGetTotalTlsResult',
    'get_total_tls',
    'get_total_tls_output',
]

@pulumi.output_type
class GetTotalTlsResult:
    """
    A collection of values returned by getTotalTls.
    """
    def __init__(__self__, certificate_authority=None, enabled=None, id=None, validity_period=None, zone_id=None):
        if certificate_authority and not isinstance(certificate_authority, str):
            raise TypeError("Expected argument 'certificate_authority' to be a str")
        pulumi.set(__self__, "certificate_authority", certificate_authority)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if validity_period and not isinstance(validity_period, float):
            raise TypeError("Expected argument 'validity_period' to be a float")
        pulumi.set(__self__, "validity_period", validity_period)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> str:
        return pulumi.get(self, "certificate_authority")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> float:
        return pulumi.get(self, "validity_period")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetTotalTlsResult(GetTotalTlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTotalTlsResult(
            certificate_authority=self.certificate_authority,
            enabled=self.enabled,
            id=self.id,
            validity_period=self.validity_period,
            zone_id=self.zone_id)


def get_total_tls(zone_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTotalTlsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getTotalTls:getTotalTls', __args__, opts=opts, typ=GetTotalTlsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTotalTlsResult(
        certificate_authority=pulumi.get(__ret__, 'certificate_authority'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        validity_period=pulumi.get(__ret__, 'validity_period'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_total_tls_output(zone_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTotalTlsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getTotalTls:getTotalTls', __args__, opts=opts, typ=GetTotalTlsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTotalTlsResult(
        certificate_authority=pulumi.get(__response__, 'certificate_authority'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        validity_period=pulumi.get(__response__, 'validity_period'),
        zone_id=pulumi.get(__response__, 'zone_id')))
