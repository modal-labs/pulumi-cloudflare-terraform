# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetZoneLockdownResult',
    'AwaitableGetZoneLockdownResult',
    'get_zone_lockdown',
    'get_zone_lockdown_output',
]

@pulumi.output_type
class GetZoneLockdownResult:
    """
    A collection of values returned by getZoneLockdown.
    """
    def __init__(__self__, configurations=None, created_on=None, description=None, filter=None, id=None, lock_downs_id=None, modified_on=None, paused=None, urls=None, zone_id=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lock_downs_id and not isinstance(lock_downs_id, str):
            raise TypeError("Expected argument 'lock_downs_id' to be a str")
        pulumi.set(__self__, "lock_downs_id", lock_downs_id)
        if modified_on and not isinstance(modified_on, str):
            raise TypeError("Expected argument 'modified_on' to be a str")
        pulumi.set(__self__, "modified_on", modified_on)
        if paused and not isinstance(paused, bool):
            raise TypeError("Expected argument 'paused' to be a bool")
        pulumi.set(__self__, "paused", paused)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetZoneLockdownConfigurationResult']:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetZoneLockdownFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockDownsId")
    def lock_downs_id(self) -> Optional[str]:
        return pulumi.get(self, "lock_downs_id")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> str:
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def paused(self) -> bool:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetZoneLockdownResult(GetZoneLockdownResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZoneLockdownResult(
            configurations=self.configurations,
            created_on=self.created_on,
            description=self.description,
            filter=self.filter,
            id=self.id,
            lock_downs_id=self.lock_downs_id,
            modified_on=self.modified_on,
            paused=self.paused,
            urls=self.urls,
            zone_id=self.zone_id)


def get_zone_lockdown(filter: Optional[Union['GetZoneLockdownFilterArgs', 'GetZoneLockdownFilterArgsDict']] = None,
                      lock_downs_id: Optional[str] = None,
                      zone_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZoneLockdownResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['lockDownsId'] = lock_downs_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZoneLockdown:getZoneLockdown', __args__, opts=opts, typ=GetZoneLockdownResult, package_ref=_utilities.get_package()).value

    return AwaitableGetZoneLockdownResult(
        configurations=pulumi.get(__ret__, 'configurations'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        lock_downs_id=pulumi.get(__ret__, 'lock_downs_id'),
        modified_on=pulumi.get(__ret__, 'modified_on'),
        paused=pulumi.get(__ret__, 'paused'),
        urls=pulumi.get(__ret__, 'urls'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_zone_lockdown_output(filter: Optional[pulumi.Input[Optional[Union['GetZoneLockdownFilterArgs', 'GetZoneLockdownFilterArgsDict']]]] = None,
                             lock_downs_id: Optional[pulumi.Input[Optional[str]]] = None,
                             zone_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZoneLockdownResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['lockDownsId'] = lock_downs_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZoneLockdown:getZoneLockdown', __args__, opts=opts, typ=GetZoneLockdownResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetZoneLockdownResult(
        configurations=pulumi.get(__response__, 'configurations'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        lock_downs_id=pulumi.get(__response__, 'lock_downs_id'),
        modified_on=pulumi.get(__response__, 'modified_on'),
        paused=pulumi.get(__response__, 'paused'),
        urls=pulumi.get(__response__, 'urls'),
        zone_id=pulumi.get(__response__, 'zone_id')))
