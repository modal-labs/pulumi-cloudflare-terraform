# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetHealthcheckResult',
    'AwaitableGetHealthcheckResult',
    'get_healthcheck',
    'get_healthcheck_output',
]

@pulumi.output_type
class GetHealthcheckResult:
    """
    A collection of values returned by getHealthcheck.
    """
    def __init__(__self__, address=None, check_regions=None, consecutive_fails=None, consecutive_successes=None, created_on=None, description=None, failure_reason=None, healthcheck_id=None, http_config=None, id=None, interval=None, modified_on=None, name=None, retries=None, status=None, suspended=None, tcp_config=None, timeout=None, type=None, zone_id=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if check_regions and not isinstance(check_regions, list):
            raise TypeError("Expected argument 'check_regions' to be a list")
        pulumi.set(__self__, "check_regions", check_regions)
        if consecutive_fails and not isinstance(consecutive_fails, float):
            raise TypeError("Expected argument 'consecutive_fails' to be a float")
        pulumi.set(__self__, "consecutive_fails", consecutive_fails)
        if consecutive_successes and not isinstance(consecutive_successes, float):
            raise TypeError("Expected argument 'consecutive_successes' to be a float")
        pulumi.set(__self__, "consecutive_successes", consecutive_successes)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if failure_reason and not isinstance(failure_reason, str):
            raise TypeError("Expected argument 'failure_reason' to be a str")
        pulumi.set(__self__, "failure_reason", failure_reason)
        if healthcheck_id and not isinstance(healthcheck_id, str):
            raise TypeError("Expected argument 'healthcheck_id' to be a str")
        pulumi.set(__self__, "healthcheck_id", healthcheck_id)
        if http_config and not isinstance(http_config, dict):
            raise TypeError("Expected argument 'http_config' to be a dict")
        pulumi.set(__self__, "http_config", http_config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, float):
            raise TypeError("Expected argument 'interval' to be a float")
        pulumi.set(__self__, "interval", interval)
        if modified_on and not isinstance(modified_on, str):
            raise TypeError("Expected argument 'modified_on' to be a str")
        pulumi.set(__self__, "modified_on", modified_on)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if retries and not isinstance(retries, float):
            raise TypeError("Expected argument 'retries' to be a float")
        pulumi.set(__self__, "retries", retries)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)
        if tcp_config and not isinstance(tcp_config, dict):
            raise TypeError("Expected argument 'tcp_config' to be a dict")
        pulumi.set(__self__, "tcp_config", tcp_config)
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        pulumi.set(__self__, "timeout", timeout)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="checkRegions")
    def check_regions(self) -> Sequence[str]:
        return pulumi.get(self, "check_regions")

    @property
    @pulumi.getter(name="consecutiveFails")
    def consecutive_fails(self) -> float:
        return pulumi.get(self, "consecutive_fails")

    @property
    @pulumi.getter(name="consecutiveSuccesses")
    def consecutive_successes(self) -> float:
        return pulumi.get(self, "consecutive_successes")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> str:
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="healthcheckId")
    def healthcheck_id(self) -> Optional[str]:
        return pulumi.get(self, "healthcheck_id")

    @property
    @pulumi.getter(name="httpConfig")
    def http_config(self) -> 'outputs.GetHealthcheckHttpConfigResult':
        return pulumi.get(self, "http_config")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> float:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> str:
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def retries(self) -> float:
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def suspended(self) -> bool:
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="tcpConfig")
    def tcp_config(self) -> 'outputs.GetHealthcheckTcpConfigResult':
        return pulumi.get(self, "tcp_config")

    @property
    @pulumi.getter
    def timeout(self) -> float:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetHealthcheckResult(GetHealthcheckResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHealthcheckResult(
            address=self.address,
            check_regions=self.check_regions,
            consecutive_fails=self.consecutive_fails,
            consecutive_successes=self.consecutive_successes,
            created_on=self.created_on,
            description=self.description,
            failure_reason=self.failure_reason,
            healthcheck_id=self.healthcheck_id,
            http_config=self.http_config,
            id=self.id,
            interval=self.interval,
            modified_on=self.modified_on,
            name=self.name,
            retries=self.retries,
            status=self.status,
            suspended=self.suspended,
            tcp_config=self.tcp_config,
            timeout=self.timeout,
            type=self.type,
            zone_id=self.zone_id)


def get_healthcheck(healthcheck_id: Optional[str] = None,
                    zone_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHealthcheckResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['healthcheckId'] = healthcheck_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getHealthcheck:getHealthcheck', __args__, opts=opts, typ=GetHealthcheckResult, package_ref=_utilities.get_package()).value

    return AwaitableGetHealthcheckResult(
        address=pulumi.get(__ret__, 'address'),
        check_regions=pulumi.get(__ret__, 'check_regions'),
        consecutive_fails=pulumi.get(__ret__, 'consecutive_fails'),
        consecutive_successes=pulumi.get(__ret__, 'consecutive_successes'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        failure_reason=pulumi.get(__ret__, 'failure_reason'),
        healthcheck_id=pulumi.get(__ret__, 'healthcheck_id'),
        http_config=pulumi.get(__ret__, 'http_config'),
        id=pulumi.get(__ret__, 'id'),
        interval=pulumi.get(__ret__, 'interval'),
        modified_on=pulumi.get(__ret__, 'modified_on'),
        name=pulumi.get(__ret__, 'name'),
        retries=pulumi.get(__ret__, 'retries'),
        status=pulumi.get(__ret__, 'status'),
        suspended=pulumi.get(__ret__, 'suspended'),
        tcp_config=pulumi.get(__ret__, 'tcp_config'),
        timeout=pulumi.get(__ret__, 'timeout'),
        type=pulumi.get(__ret__, 'type'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_healthcheck_output(healthcheck_id: Optional[pulumi.Input[Optional[str]]] = None,
                           zone_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHealthcheckResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['healthcheckId'] = healthcheck_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getHealthcheck:getHealthcheck', __args__, opts=opts, typ=GetHealthcheckResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetHealthcheckResult(
        address=pulumi.get(__response__, 'address'),
        check_regions=pulumi.get(__response__, 'check_regions'),
        consecutive_fails=pulumi.get(__response__, 'consecutive_fails'),
        consecutive_successes=pulumi.get(__response__, 'consecutive_successes'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        failure_reason=pulumi.get(__response__, 'failure_reason'),
        healthcheck_id=pulumi.get(__response__, 'healthcheck_id'),
        http_config=pulumi.get(__response__, 'http_config'),
        id=pulumi.get(__response__, 'id'),
        interval=pulumi.get(__response__, 'interval'),
        modified_on=pulumi.get(__response__, 'modified_on'),
        name=pulumi.get(__response__, 'name'),
        retries=pulumi.get(__response__, 'retries'),
        status=pulumi.get(__response__, 'status'),
        suspended=pulumi.get(__response__, 'suspended'),
        tcp_config=pulumi.get(__response__, 'tcp_config'),
        timeout=pulumi.get(__response__, 'timeout'),
        type=pulumi.get(__response__, 'type'),
        zone_id=pulumi.get(__response__, 'zone_id')))
