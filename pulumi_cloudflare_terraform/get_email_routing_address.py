# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEmailRoutingAddressResult',
    'AwaitableGetEmailRoutingAddressResult',
    'get_email_routing_address',
    'get_email_routing_address_output',
]

@pulumi.output_type
class GetEmailRoutingAddressResult:
    """
    A collection of values returned by getEmailRoutingAddress.
    """
    def __init__(__self__, account_id=None, created=None, destination_address_identifier=None, email=None, filter=None, id=None, modified=None, tag=None, verified=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if destination_address_identifier and not isinstance(destination_address_identifier, str):
            raise TypeError("Expected argument 'destination_address_identifier' to be a str")
        pulumi.set(__self__, "destination_address_identifier", destination_address_identifier)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified and not isinstance(modified, str):
            raise TypeError("Expected argument 'modified' to be a str")
        pulumi.set(__self__, "modified", modified)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if verified and not isinstance(verified, str):
            raise TypeError("Expected argument 'verified' to be a str")
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="destinationAddressIdentifier")
    def destination_address_identifier(self) -> Optional[str]:
        return pulumi.get(self, "destination_address_identifier")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetEmailRoutingAddressFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def modified(self) -> str:
        return pulumi.get(self, "modified")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def verified(self) -> str:
        return pulumi.get(self, "verified")


class AwaitableGetEmailRoutingAddressResult(GetEmailRoutingAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEmailRoutingAddressResult(
            account_id=self.account_id,
            created=self.created,
            destination_address_identifier=self.destination_address_identifier,
            email=self.email,
            filter=self.filter,
            id=self.id,
            modified=self.modified,
            tag=self.tag,
            verified=self.verified)


def get_email_routing_address(account_id: Optional[str] = None,
                              destination_address_identifier: Optional[str] = None,
                              filter: Optional[Union['GetEmailRoutingAddressFilterArgs', 'GetEmailRoutingAddressFilterArgsDict']] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEmailRoutingAddressResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['destinationAddressIdentifier'] = destination_address_identifier
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getEmailRoutingAddress:getEmailRoutingAddress', __args__, opts=opts, typ=GetEmailRoutingAddressResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEmailRoutingAddressResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created=pulumi.get(__ret__, 'created'),
        destination_address_identifier=pulumi.get(__ret__, 'destination_address_identifier'),
        email=pulumi.get(__ret__, 'email'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        modified=pulumi.get(__ret__, 'modified'),
        tag=pulumi.get(__ret__, 'tag'),
        verified=pulumi.get(__ret__, 'verified'))
def get_email_routing_address_output(account_id: Optional[pulumi.Input[str]] = None,
                                     destination_address_identifier: Optional[pulumi.Input[Optional[str]]] = None,
                                     filter: Optional[pulumi.Input[Optional[Union['GetEmailRoutingAddressFilterArgs', 'GetEmailRoutingAddressFilterArgsDict']]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEmailRoutingAddressResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['destinationAddressIdentifier'] = destination_address_identifier
    __args__['filter'] = filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getEmailRoutingAddress:getEmailRoutingAddress', __args__, opts=opts, typ=GetEmailRoutingAddressResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEmailRoutingAddressResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created=pulumi.get(__response__, 'created'),
        destination_address_identifier=pulumi.get(__response__, 'destination_address_identifier'),
        email=pulumi.get(__response__, 'email'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        modified=pulumi.get(__response__, 'modified'),
        tag=pulumi.get(__response__, 'tag'),
        verified=pulumi.get(__response__, 'verified')))
