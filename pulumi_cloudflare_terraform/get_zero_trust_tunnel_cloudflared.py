# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetZeroTrustTunnelCloudflaredResult',
    'AwaitableGetZeroTrustTunnelCloudflaredResult',
    'get_zero_trust_tunnel_cloudflared',
    'get_zero_trust_tunnel_cloudflared_output',
]

@pulumi.output_type
class GetZeroTrustTunnelCloudflaredResult:
    """
    A collection of values returned by getZeroTrustTunnelCloudflared.
    """
    def __init__(__self__, account_id=None, account_tag=None, connections=None, conns_active_at=None, conns_inactive_at=None, created_at=None, deleted_at=None, filter=None, id=None, metadata=None, name=None, remote_config=None, status=None, tun_type=None, tunnel_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if account_tag and not isinstance(account_tag, str):
            raise TypeError("Expected argument 'account_tag' to be a str")
        pulumi.set(__self__, "account_tag", account_tag)
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if conns_active_at and not isinstance(conns_active_at, str):
            raise TypeError("Expected argument 'conns_active_at' to be a str")
        pulumi.set(__self__, "conns_active_at", conns_active_at)
        if conns_inactive_at and not isinstance(conns_inactive_at, str):
            raise TypeError("Expected argument 'conns_inactive_at' to be a str")
        pulumi.set(__self__, "conns_inactive_at", conns_inactive_at)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deleted_at and not isinstance(deleted_at, str):
            raise TypeError("Expected argument 'deleted_at' to be a str")
        pulumi.set(__self__, "deleted_at", deleted_at)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, str):
            raise TypeError("Expected argument 'metadata' to be a str")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remote_config and not isinstance(remote_config, bool):
            raise TypeError("Expected argument 'remote_config' to be a bool")
        pulumi.set(__self__, "remote_config", remote_config)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tun_type and not isinstance(tun_type, str):
            raise TypeError("Expected argument 'tun_type' to be a str")
        pulumi.set(__self__, "tun_type", tun_type)
        if tunnel_id and not isinstance(tunnel_id, str):
            raise TypeError("Expected argument 'tunnel_id' to be a str")
        pulumi.set(__self__, "tunnel_id", tunnel_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountTag")
    def account_tag(self) -> str:
        return pulumi.get(self, "account_tag")

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetZeroTrustTunnelCloudflaredConnectionResult']:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter(name="connsActiveAt")
    def conns_active_at(self) -> str:
        return pulumi.get(self, "conns_active_at")

    @property
    @pulumi.getter(name="connsInactiveAt")
    def conns_inactive_at(self) -> str:
        return pulumi.get(self, "conns_inactive_at")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetZeroTrustTunnelCloudflaredFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> str:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteConfig")
    def remote_config(self) -> bool:
        return pulumi.get(self, "remote_config")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunType")
    def tun_type(self) -> str:
        return pulumi.get(self, "tun_type")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_id")


class AwaitableGetZeroTrustTunnelCloudflaredResult(GetZeroTrustTunnelCloudflaredResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustTunnelCloudflaredResult(
            account_id=self.account_id,
            account_tag=self.account_tag,
            connections=self.connections,
            conns_active_at=self.conns_active_at,
            conns_inactive_at=self.conns_inactive_at,
            created_at=self.created_at,
            deleted_at=self.deleted_at,
            filter=self.filter,
            id=self.id,
            metadata=self.metadata,
            name=self.name,
            remote_config=self.remote_config,
            status=self.status,
            tun_type=self.tun_type,
            tunnel_id=self.tunnel_id)


def get_zero_trust_tunnel_cloudflared(account_id: Optional[str] = None,
                                      filter: Optional[Union['GetZeroTrustTunnelCloudflaredFilterArgs', 'GetZeroTrustTunnelCloudflaredFilterArgsDict']] = None,
                                      tunnel_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustTunnelCloudflaredResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['filter'] = filter
    __args__['tunnelId'] = tunnel_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustTunnelCloudflared:getZeroTrustTunnelCloudflared', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredResult, package_ref=_utilities.get_package()).value

    return AwaitableGetZeroTrustTunnelCloudflaredResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        account_tag=pulumi.get(__ret__, 'account_tag'),
        connections=pulumi.get(__ret__, 'connections'),
        conns_active_at=pulumi.get(__ret__, 'conns_active_at'),
        conns_inactive_at=pulumi.get(__ret__, 'conns_inactive_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        deleted_at=pulumi.get(__ret__, 'deleted_at'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        remote_config=pulumi.get(__ret__, 'remote_config'),
        status=pulumi.get(__ret__, 'status'),
        tun_type=pulumi.get(__ret__, 'tun_type'),
        tunnel_id=pulumi.get(__ret__, 'tunnel_id'))
def get_zero_trust_tunnel_cloudflared_output(account_id: Optional[pulumi.Input[str]] = None,
                                             filter: Optional[pulumi.Input[Optional[Union['GetZeroTrustTunnelCloudflaredFilterArgs', 'GetZeroTrustTunnelCloudflaredFilterArgsDict']]]] = None,
                                             tunnel_id: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustTunnelCloudflaredResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['filter'] = filter
    __args__['tunnelId'] = tunnel_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustTunnelCloudflared:getZeroTrustTunnelCloudflared', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetZeroTrustTunnelCloudflaredResult(
        account_id=pulumi.get(__response__, 'account_id'),
        account_tag=pulumi.get(__response__, 'account_tag'),
        connections=pulumi.get(__response__, 'connections'),
        conns_active_at=pulumi.get(__response__, 'conns_active_at'),
        conns_inactive_at=pulumi.get(__response__, 'conns_inactive_at'),
        created_at=pulumi.get(__response__, 'created_at'),
        deleted_at=pulumi.get(__response__, 'deleted_at'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        metadata=pulumi.get(__response__, 'metadata'),
        name=pulumi.get(__response__, 'name'),
        remote_config=pulumi.get(__response__, 'remote_config'),
        status=pulumi.get(__response__, 'status'),
        tun_type=pulumi.get(__response__, 'tun_type'),
        tunnel_id=pulumi.get(__response__, 'tunnel_id')))
