# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZeroTrustTunnelCloudflaredRoutesResult',
    'AwaitableGetZeroTrustTunnelCloudflaredRoutesResult',
    'get_zero_trust_tunnel_cloudflared_routes',
    'get_zero_trust_tunnel_cloudflared_routes_output',
]

@pulumi.output_type
class GetZeroTrustTunnelCloudflaredRoutesResult:
    """
    A collection of values returned by getZeroTrustTunnelCloudflaredRoutes.
    """
    def __init__(__self__, account_id=None, comment=None, existed_at=None, id=None, is_deleted=None, max_items=None, network_subset=None, network_superset=None, results=None, route_id=None, tun_types=None, tunnel_id=None, virtual_network_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if existed_at and not isinstance(existed_at, str):
            raise TypeError("Expected argument 'existed_at' to be a str")
        pulumi.set(__self__, "existed_at", existed_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_deleted and not isinstance(is_deleted, bool):
            raise TypeError("Expected argument 'is_deleted' to be a bool")
        pulumi.set(__self__, "is_deleted", is_deleted)
        if max_items and not isinstance(max_items, float):
            raise TypeError("Expected argument 'max_items' to be a float")
        pulumi.set(__self__, "max_items", max_items)
        if network_subset and not isinstance(network_subset, str):
            raise TypeError("Expected argument 'network_subset' to be a str")
        pulumi.set(__self__, "network_subset", network_subset)
        if network_superset and not isinstance(network_superset, str):
            raise TypeError("Expected argument 'network_superset' to be a str")
        pulumi.set(__self__, "network_superset", network_superset)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if route_id and not isinstance(route_id, str):
            raise TypeError("Expected argument 'route_id' to be a str")
        pulumi.set(__self__, "route_id", route_id)
        if tun_types and not isinstance(tun_types, str):
            raise TypeError("Expected argument 'tun_types' to be a str")
        pulumi.set(__self__, "tun_types", tun_types)
        if tunnel_id and not isinstance(tunnel_id, str):
            raise TypeError("Expected argument 'tunnel_id' to be a str")
        pulumi.set(__self__, "tunnel_id", tunnel_id)
        if virtual_network_id and not isinstance(virtual_network_id, str):
            raise TypeError("Expected argument 'virtual_network_id' to be a str")
        pulumi.set(__self__, "virtual_network_id", virtual_network_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="existedAt")
    def existed_at(self) -> Optional[str]:
        return pulumi.get(self, "existed_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> Optional[bool]:
        return pulumi.get(self, "is_deleted")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[float]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="networkSubset")
    def network_subset(self) -> Optional[str]:
        return pulumi.get(self, "network_subset")

    @property
    @pulumi.getter(name="networkSuperset")
    def network_superset(self) -> Optional[str]:
        return pulumi.get(self, "network_superset")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetZeroTrustTunnelCloudflaredRoutesResultResult']:
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[str]:
        return pulumi.get(self, "route_id")

    @property
    @pulumi.getter(name="tunTypes")
    def tun_types(self) -> Optional[str]:
        return pulumi.get(self, "tun_types")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[str]:
        return pulumi.get(self, "tunnel_id")

    @property
    @pulumi.getter(name="virtualNetworkId")
    def virtual_network_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_network_id")


class AwaitableGetZeroTrustTunnelCloudflaredRoutesResult(GetZeroTrustTunnelCloudflaredRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustTunnelCloudflaredRoutesResult(
            account_id=self.account_id,
            comment=self.comment,
            existed_at=self.existed_at,
            id=self.id,
            is_deleted=self.is_deleted,
            max_items=self.max_items,
            network_subset=self.network_subset,
            network_superset=self.network_superset,
            results=self.results,
            route_id=self.route_id,
            tun_types=self.tun_types,
            tunnel_id=self.tunnel_id,
            virtual_network_id=self.virtual_network_id)


def get_zero_trust_tunnel_cloudflared_routes(account_id: Optional[str] = None,
                                             comment: Optional[str] = None,
                                             existed_at: Optional[str] = None,
                                             is_deleted: Optional[bool] = None,
                                             max_items: Optional[float] = None,
                                             network_subset: Optional[str] = None,
                                             network_superset: Optional[str] = None,
                                             route_id: Optional[str] = None,
                                             tun_types: Optional[str] = None,
                                             tunnel_id: Optional[str] = None,
                                             virtual_network_id: Optional[str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustTunnelCloudflaredRoutesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['comment'] = comment
    __args__['existedAt'] = existed_at
    __args__['isDeleted'] = is_deleted
    __args__['maxItems'] = max_items
    __args__['networkSubset'] = network_subset
    __args__['networkSuperset'] = network_superset
    __args__['routeId'] = route_id
    __args__['tunTypes'] = tun_types
    __args__['tunnelId'] = tunnel_id
    __args__['virtualNetworkId'] = virtual_network_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustTunnelCloudflaredRoutes:getZeroTrustTunnelCloudflaredRoutes', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredRoutesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetZeroTrustTunnelCloudflaredRoutesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        comment=pulumi.get(__ret__, 'comment'),
        existed_at=pulumi.get(__ret__, 'existed_at'),
        id=pulumi.get(__ret__, 'id'),
        is_deleted=pulumi.get(__ret__, 'is_deleted'),
        max_items=pulumi.get(__ret__, 'max_items'),
        network_subset=pulumi.get(__ret__, 'network_subset'),
        network_superset=pulumi.get(__ret__, 'network_superset'),
        results=pulumi.get(__ret__, 'results'),
        route_id=pulumi.get(__ret__, 'route_id'),
        tun_types=pulumi.get(__ret__, 'tun_types'),
        tunnel_id=pulumi.get(__ret__, 'tunnel_id'),
        virtual_network_id=pulumi.get(__ret__, 'virtual_network_id'))
def get_zero_trust_tunnel_cloudflared_routes_output(account_id: Optional[pulumi.Input[str]] = None,
                                                    comment: Optional[pulumi.Input[Optional[str]]] = None,
                                                    existed_at: Optional[pulumi.Input[Optional[str]]] = None,
                                                    is_deleted: Optional[pulumi.Input[Optional[bool]]] = None,
                                                    max_items: Optional[pulumi.Input[Optional[float]]] = None,
                                                    network_subset: Optional[pulumi.Input[Optional[str]]] = None,
                                                    network_superset: Optional[pulumi.Input[Optional[str]]] = None,
                                                    route_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                    tun_types: Optional[pulumi.Input[Optional[str]]] = None,
                                                    tunnel_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                    virtual_network_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustTunnelCloudflaredRoutesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['comment'] = comment
    __args__['existedAt'] = existed_at
    __args__['isDeleted'] = is_deleted
    __args__['maxItems'] = max_items
    __args__['networkSubset'] = network_subset
    __args__['networkSuperset'] = network_superset
    __args__['routeId'] = route_id
    __args__['tunTypes'] = tun_types
    __args__['tunnelId'] = tunnel_id
    __args__['virtualNetworkId'] = virtual_network_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustTunnelCloudflaredRoutes:getZeroTrustTunnelCloudflaredRoutes', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredRoutesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetZeroTrustTunnelCloudflaredRoutesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        comment=pulumi.get(__response__, 'comment'),
        existed_at=pulumi.get(__response__, 'existed_at'),
        id=pulumi.get(__response__, 'id'),
        is_deleted=pulumi.get(__response__, 'is_deleted'),
        max_items=pulumi.get(__response__, 'max_items'),
        network_subset=pulumi.get(__response__, 'network_subset'),
        network_superset=pulumi.get(__response__, 'network_superset'),
        results=pulumi.get(__response__, 'results'),
        route_id=pulumi.get(__response__, 'route_id'),
        tun_types=pulumi.get(__response__, 'tun_types'),
        tunnel_id=pulumi.get(__response__, 'tunnel_id'),
        virtual_network_id=pulumi.get(__response__, 'virtual_network_id')))
