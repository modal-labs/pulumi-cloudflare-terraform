# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogpushDatasetJobResult',
    'AwaitableGetLogpushDatasetJobResult',
    'get_logpush_dataset_job',
    'get_logpush_dataset_job_output',
]

@pulumi.output_type
class GetLogpushDatasetJobResult:
    """
    A collection of values returned by getLogpushDatasetJob.
    """
    def __init__(__self__, account_id=None, dataset=None, dataset_id=None, destination_conf=None, enabled=None, error_message=None, frequency=None, id=None, kind=None, last_complete=None, last_error=None, logpull_options=None, max_upload_bytes=None, max_upload_interval_seconds=None, max_upload_records=None, name=None, output_options=None, zone_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if dataset_id and not isinstance(dataset_id, str):
            raise TypeError("Expected argument 'dataset_id' to be a str")
        pulumi.set(__self__, "dataset_id", dataset_id)
        if destination_conf and not isinstance(destination_conf, str):
            raise TypeError("Expected argument 'destination_conf' to be a str")
        pulumi.set(__self__, "destination_conf", destination_conf)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        pulumi.set(__self__, "error_message", error_message)
        if frequency and not isinstance(frequency, str):
            raise TypeError("Expected argument 'frequency' to be a str")
        pulumi.set(__self__, "frequency", frequency)
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if last_complete and not isinstance(last_complete, str):
            raise TypeError("Expected argument 'last_complete' to be a str")
        pulumi.set(__self__, "last_complete", last_complete)
        if last_error and not isinstance(last_error, str):
            raise TypeError("Expected argument 'last_error' to be a str")
        pulumi.set(__self__, "last_error", last_error)
        if logpull_options and not isinstance(logpull_options, str):
            raise TypeError("Expected argument 'logpull_options' to be a str")
        pulumi.set(__self__, "logpull_options", logpull_options)
        if max_upload_bytes and not isinstance(max_upload_bytes, float):
            raise TypeError("Expected argument 'max_upload_bytes' to be a float")
        pulumi.set(__self__, "max_upload_bytes", max_upload_bytes)
        if max_upload_interval_seconds and not isinstance(max_upload_interval_seconds, float):
            raise TypeError("Expected argument 'max_upload_interval_seconds' to be a float")
        pulumi.set(__self__, "max_upload_interval_seconds", max_upload_interval_seconds)
        if max_upload_records and not isinstance(max_upload_records, float):
            raise TypeError("Expected argument 'max_upload_records' to be a float")
        pulumi.set(__self__, "max_upload_records", max_upload_records)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_options and not isinstance(output_options, dict):
            raise TypeError("Expected argument 'output_options' to be a dict")
        pulumi.set(__self__, "output_options", output_options)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="destinationConf")
    def destination_conf(self) -> str:
        return pulumi.get(self, "destination_conf")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> float:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="lastComplete")
    def last_complete(self) -> str:
        return pulumi.get(self, "last_complete")

    @property
    @pulumi.getter(name="lastError")
    def last_error(self) -> str:
        return pulumi.get(self, "last_error")

    @property
    @pulumi.getter(name="logpullOptions")
    def logpull_options(self) -> str:
        return pulumi.get(self, "logpull_options")

    @property
    @pulumi.getter(name="maxUploadBytes")
    def max_upload_bytes(self) -> float:
        return pulumi.get(self, "max_upload_bytes")

    @property
    @pulumi.getter(name="maxUploadIntervalSeconds")
    def max_upload_interval_seconds(self) -> float:
        return pulumi.get(self, "max_upload_interval_seconds")

    @property
    @pulumi.getter(name="maxUploadRecords")
    def max_upload_records(self) -> float:
        return pulumi.get(self, "max_upload_records")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputOptions")
    def output_options(self) -> 'outputs.GetLogpushDatasetJobOutputOptionsResult':
        return pulumi.get(self, "output_options")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


class AwaitableGetLogpushDatasetJobResult(GetLogpushDatasetJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogpushDatasetJobResult(
            account_id=self.account_id,
            dataset=self.dataset,
            dataset_id=self.dataset_id,
            destination_conf=self.destination_conf,
            enabled=self.enabled,
            error_message=self.error_message,
            frequency=self.frequency,
            id=self.id,
            kind=self.kind,
            last_complete=self.last_complete,
            last_error=self.last_error,
            logpull_options=self.logpull_options,
            max_upload_bytes=self.max_upload_bytes,
            max_upload_interval_seconds=self.max_upload_interval_seconds,
            max_upload_records=self.max_upload_records,
            name=self.name,
            output_options=self.output_options,
            zone_id=self.zone_id)


def get_logpush_dataset_job(account_id: Optional[str] = None,
                            dataset_id: Optional[str] = None,
                            zone_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogpushDatasetJobResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['datasetId'] = dataset_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getLogpushDatasetJob:getLogpushDatasetJob', __args__, opts=opts, typ=GetLogpushDatasetJobResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogpushDatasetJobResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        dataset=pulumi.get(__ret__, 'dataset'),
        dataset_id=pulumi.get(__ret__, 'dataset_id'),
        destination_conf=pulumi.get(__ret__, 'destination_conf'),
        enabled=pulumi.get(__ret__, 'enabled'),
        error_message=pulumi.get(__ret__, 'error_message'),
        frequency=pulumi.get(__ret__, 'frequency'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        last_complete=pulumi.get(__ret__, 'last_complete'),
        last_error=pulumi.get(__ret__, 'last_error'),
        logpull_options=pulumi.get(__ret__, 'logpull_options'),
        max_upload_bytes=pulumi.get(__ret__, 'max_upload_bytes'),
        max_upload_interval_seconds=pulumi.get(__ret__, 'max_upload_interval_seconds'),
        max_upload_records=pulumi.get(__ret__, 'max_upload_records'),
        name=pulumi.get(__ret__, 'name'),
        output_options=pulumi.get(__ret__, 'output_options'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_logpush_dataset_job_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   dataset_id: Optional[pulumi.Input[str]] = None,
                                   zone_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogpushDatasetJobResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['datasetId'] = dataset_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getLogpushDatasetJob:getLogpushDatasetJob', __args__, opts=opts, typ=GetLogpushDatasetJobResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogpushDatasetJobResult(
        account_id=pulumi.get(__response__, 'account_id'),
        dataset=pulumi.get(__response__, 'dataset'),
        dataset_id=pulumi.get(__response__, 'dataset_id'),
        destination_conf=pulumi.get(__response__, 'destination_conf'),
        enabled=pulumi.get(__response__, 'enabled'),
        error_message=pulumi.get(__response__, 'error_message'),
        frequency=pulumi.get(__response__, 'frequency'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        last_complete=pulumi.get(__response__, 'last_complete'),
        last_error=pulumi.get(__response__, 'last_error'),
        logpull_options=pulumi.get(__response__, 'logpull_options'),
        max_upload_bytes=pulumi.get(__response__, 'max_upload_bytes'),
        max_upload_interval_seconds=pulumi.get(__response__, 'max_upload_interval_seconds'),
        max_upload_records=pulumi.get(__response__, 'max_upload_records'),
        name=pulumi.get(__response__, 'name'),
        output_options=pulumi.get(__response__, 'output_options'),
        zone_id=pulumi.get(__response__, 'zone_id')))
